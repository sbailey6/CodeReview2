Task 2: Summary of Our File's Role in Android
ClipboardService is a class which is used to allow different applications to copy and paste data. It implements
concurrent access to the clipboard by multiple processes. The data is stored in a class called ClipData, which contains meta-data that describes the information being copied and pasted. In order to keep track of which 
process is accessing the clipboard, a user id and calling package can be passed to some methods to check if the application
has read and write access. The clipoboard service fetches the user profile, checks the user privileges, synchronizes the process thread, clears the identity of the calling process, initializes an empty clipboard object for the particular user id, and restores the identity of the calling process.

Task 3: UML class diagram describing superclasses and interfaces is provided in a separate file. We have provided a SVG document, which shows the superclasses and interfaces. We generated it at www.plantuml.com. Task4.java shows the syntax used
to generate the UML. 

Task 4: UML class diagram describing non-inheritance associations involving other classes is provided in a separate file. We have provided a SVG document, which shows the Associations with arrows, but it is a bit crowded, due to the sheer number of associations. Thus, we have also provide a task 4.java file, showing the associations explicitly through plantuml notation. This UML was generated using www.plantuml.com. The arrows have been color coded to help with some visual clarity in the SVG file. Blue arrows are the associations for HostClipboardMonitor, green for ClipboardService, purple for ListenerInfo, orange for PerUserClipboard, and black for ClipboardImpl.

Task 5: What we have leared from this Code Review
While reviewing the clipboard service source code in the Android framework codebase, we have learnt how data is copied to the clipboard and placed in a new target location. This involves user profile management, synchronous thread execution, user permission management, and text handling for clipboard service. This has also helped us understand the Java programming principles of implementation of interface, nested classes, and function overriding.
